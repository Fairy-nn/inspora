// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fairy-nn/inspora/internal/events/article"
	"github.com/Fairy-nn/inspora/internal/events/feed"
	"github.com/Fairy-nn/inspora/internal/repository"
	"github.com/Fairy-nn/inspora/internal/repository/cache"
	"github.com/Fairy-nn/inspora/internal/repository/dao"
	"github.com/Fairy-nn/inspora/internal/service"
	"github.com/Fairy-nn/inspora/internal/web"
	"github.com/Fairy-nn/inspora/ioc"
	"github.com/Fairy-nn/inspora/pkg/elasticsearch"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	v := ioc.InitMiddlewares()
	db := ioc.InitDB()
	userDaoInterface := dao.NewUserDAO(db)
	cmdable := ioc.InitCache()
	userCacheInterface := cache.NewUserCacheV1(cmdable)
	userRepositoryInterface := repository.NewUserRepository(userDaoInterface, userCacheInterface)
	elasticSearchConfig := ioc.ProvideElasticSearchConfig()
	client, err := elasticsearch.NewClient(elasticSearchConfig)
	if err != nil {
		return nil, err
	}
	indexService := elasticsearch.NewBaseIndexService(client, elasticSearchConfig)
	searchService := elasticsearch.NewBaseSearchService(client, elasticSearchConfig)
	userSearchService := elasticsearch.NewUserSearchService(indexService, searchService)
	articleSearchService := elasticsearch.NewArticleSearchService(indexService, searchService)
	serviceSearchService := service.NewSearchService(userSearchService, articleSearchService)
	userServiceInterface := service.NewUserService(userRepositoryInterface, serviceSearchService)
	codeCacheInterface := cache.NewCodeCache(cmdable)
	codeRepositoryInterface := repository.NewCodeRepository(codeCacheInterface)
	smsService := ioc.InitSMS()
	codeServiceInterface := service.NewCodeService(codeRepositoryInterface, smsService)
	userHandler := web.NewUserHandler(userServiceInterface, codeServiceInterface)
	articleDaoInterface := dao.NewArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDaoInterface, articleCache, userRepositoryInterface)
	saramaClient := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(saramaClient)
	producer := article.NewKafkaProducer(syncProducer)
	feedDAOInterface := dao.NewGORMFeedDAO(db)
	feedCache := cache.NewRedisFeedCache(cmdable)
	feedRepository := repository.NewFeedRepository(feedDAOInterface, feedCache)
	feedProducer := feed.NewKafkaProducer(syncProducer, feedRepository)
	articleServiceInterface := service.NewArticleService(articleRepository, producer, serviceSearchService, feedProducer)
	interactionDaoInterface := dao.NewGormInteractionDAO(db)
	interactionCacheInterface := cache.NewRedisInteractionCache(cmdable)
	interactionRepositoryInterface := repository.NewInteractionRepository(interactionDaoInterface, interactionCacheInterface)
	interactionServiceInterface := ProvideDependentInteractionService(interactionRepositoryInterface, feedProducer, articleServiceInterface)
	rankingRepositoryInterface := ioc.InitRankingRepository(cmdable)
	rankingServiceInterface := service.NewBatchRankService(articleServiceInterface, interactionServiceInterface, rankingRepositoryInterface)
	articleHandler := web.NewArticleHandler(articleServiceInterface, interactionServiceInterface, rankingServiceInterface)
	commentDAO := dao.NewCommentDAO(db)
	commentCache := cache.NewRedisCommentCache(cmdable)
	commentRepository := repository.NewCachedCommentRepository(commentDAO, commentCache)
	commentService := service.NewCommentService(commentRepository, feedProducer, articleServiceInterface)
	commentHandler := web.NewCommentHandler(commentService)
	followRelationDAO := dao.NewFollowRelationDAO(db)
	followCache := cache.NewRedisFollowCache(cmdable)
	followRepository := repository.NewFollowRepository(followRelationDAO, followCache)
	followService := service.NewFollowService(followRepository, feedProducer)
	followHandler := web.NewFollowHandler(followService)
	searchHandler := web.NewSearchHandler(serviceSearchService)
	feedServiceInterface := service.NewFeedService(feedRepository, followRepository, articleServiceInterface, userRepositoryInterface, feedProducer)
	feedHandler := web.NewFeedHandler(feedServiceInterface)
	ossServiceInterface, err := service.NewOSSService()
	if err != nil {
		return nil, err
	}
	uploadHandler := web.NewUploadHandler(ossServiceInterface)
	engine := ioc.InitGin(v, userHandler, articleHandler, commentHandler, followHandler, searchHandler, feedHandler, uploadHandler)
	consumer := article.NewInteractionBatchConsumer(saramaClient, interactionRepositoryInterface)
	feedConsumer := feed.NewKafkaFeedConsumer(saramaClient, feedRepository, followRepository, articleRepository, userRepositoryInterface)
	v2 := ioc.NewConsumers(consumer, feedConsumer)
	rankingJob := ioc.InitRankingJob(rankingServiceInterface)
	cron := ioc.InitJobs(rankingJob)
	defaultSearchInitializer := ioc.ProvideSearchInitializer(userSearchService, articleSearchService)
	app := &App{
		Server:    engine,
		Consumers: v2,
		Cron:      cron,
		Search:    defaultSearchInitializer,
	}
	return app, nil
}

// wire.go:

var commentServiceSet = wire.NewSet(dao.NewCommentDAO, cache.NewRedisCommentCache, repository.NewCachedCommentRepository, service.NewCommentService, web.NewCommentHandler)

var followServiceSet = wire.NewSet(dao.NewFollowRelationDAO, cache.NewRedisFollowCache, repository.NewFollowRepository, service.NewFollowService, web.NewFollowHandler)

var searchServiceSet = wire.NewSet(ioc.ElasticsearchSet, ioc.SearchInitializerSet, service.NewSearchService, web.NewSearchHandler)

var feedServiceSet = wire.NewSet(dao.NewGORMFeedDAO, cache.NewRedisFeedCache, repository.NewFeedRepository, feed.NewKafkaProducer, service.NewFeedService, web.NewFeedHandler)

var interactionServiceSet = wire.NewSet(dao.NewGormInteractionDAO, cache.NewRedisInteractionCache, repository.NewInteractionRepository, ProvideDependentInteractionService)

var ossServiceSet = wire.NewSet(service.NewOSSService, web.NewUploadHandler)

func ProvideDependentCommentService(repo repository.CommentRepository, feedProd feed.Producer, articleSvc service.ArticleServiceInterface) service.CommentService {
	return service.NewCommentService(repo, feedProd, articleSvc)
}

func ProvideDependentFollowService(repo repository.FollowRepository, feedProd feed.Producer) service.FollowService {
	return service.NewFollowService(repo, feedProd)
}

func ProvideDependentInteractionService(repo repository.InteractionRepositoryInterface, feedProd feed.Producer, articleSvc service.ArticleServiceInterface) service.InteractionServiceInterface {
	return service.NewInteractionService(repo, feedProd, articleSvc)
}

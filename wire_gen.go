// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fairy-nn/inspora/internal/events/article"
	"github.com/Fairy-nn/inspora/internal/repository"
	"github.com/Fairy-nn/inspora/internal/repository/cache"
	"github.com/Fairy-nn/inspora/internal/repository/dao"
	"github.com/Fairy-nn/inspora/internal/service"
	"github.com/Fairy-nn/inspora/internal/web"
	"github.com/Fairy-nn/inspora/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *App {
	v := ioc.InitMiddlewares()
	db := ioc.InitDB()
	userDaoInterface := dao.NewUserDAO(db)
	cmdable := ioc.InitCache()
	userCacheInterface := cache.NewUserCacheV1(cmdable)
	userRepositoryInterface := repository.NewUserRepository(userDaoInterface, userCacheInterface)
	userServiceInterface := service.NewUserService(userRepositoryInterface)
	codeCacheInterface := cache.NewCodeCache(cmdable)
	codeRepositoryInterface := repository.NewCodeRepository(codeCacheInterface)
	smsService := ioc.InitSMS()
	codeServiceInterface := service.NewCodeService(codeRepositoryInterface, smsService)
	userHandler := web.NewUserHandler(userServiceInterface, codeServiceInterface)
	articleDaoInterface := dao.NewArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDaoInterface, articleCache, userRepositoryInterface)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleServiceInterface := service.NewArticleService(articleRepository, producer)
	interactionDaoInterface := dao.NewGormInteractionDAO(db)
	interactionCacheInterface := cache.NewRedisInteractionCache(cmdable)
	interactionRepositoryInterface := repository.NewInteractionRepository(interactionDaoInterface, interactionCacheInterface)
	interactionServiceInterface := service.NewInteractionService(interactionRepositoryInterface)
	rankingRepositoryInterface := ioc.InitRankingRepository(cmdable)
	rankingServiceInterface := service.NewBatchRankService(articleServiceInterface, interactionServiceInterface, rankingRepositoryInterface)
	articleHandler := web.NewArticleHandler(articleServiceInterface, interactionServiceInterface, rankingServiceInterface)
	commentDAO := dao.NewCommentDAO(db)
	commentCache := cache.NewRedisCommentCache(cmdable)
	commentRepository := repository.NewCachedCommentRepository(commentDAO, commentCache)
	commentService := service.NewCommentService(commentRepository)
	commentHandler := web.NewCommentHandler(commentService)
	followRelationDAO := dao.NewFollowRelationDAO(db)
	followCache := cache.NewRedisFollowCache(cmdable)
	followRepository := repository.NewFollowRepository(followRelationDAO, followCache)
	followService := service.NewFollowService(followRepository)
	followHandler := web.NewFollowHandler(followService)
	engine := ioc.InitGin(v, userHandler, articleHandler, commentHandler, followHandler)
	consumer := article.NewInteractionBatchConsumer(client, interactionRepositoryInterface)
	v2 := ioc.NewSyncConsumer(consumer)
	rankingJob := ioc.InitRankingJob(rankingServiceInterface)
	cron := ioc.InitJobs(rankingJob)
	app := &App{
		Server:    engine,
		Consumers: v2,
		Cron:      cron,
	}
	return app
}

// wire.go:

var commentServiceSet = wire.NewSet(dao.NewCommentDAO, cache.NewRedisCommentCache, repository.NewCachedCommentRepository, service.NewCommentService, web.NewCommentHandler)

var followServiceSet = wire.NewSet(dao.NewFollowRelationDAO, cache.NewRedisFollowCache, repository.NewFollowRepository, service.NewFollowService, web.NewFollowHandler)

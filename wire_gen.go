// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fairy-nn/inspora/internal/repository"
	"github.com/Fairy-nn/inspora/internal/repository/cache"
	"github.com/Fairy-nn/inspora/internal/repository/dao"
	"github.com/Fairy-nn/inspora/internal/service"
	"github.com/Fairy-nn/inspora/internal/web"
	"github.com/Fairy-nn/inspora/ioc"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitInspora() *gin.Engine {
	v := ioc.InitMiddlewares()
	db := ioc.InitDB()
	userDaoInterface := dao.NewUserDAO(db)
	cmdable := ioc.InitCache()
	userCacheInterface := cache.NewUserCacheV1(cmdable)
	userRepositoryInterface := repository.NewUserRepository(userDaoInterface, userCacheInterface)
	userServiceInterface := service.NewUserService(userRepositoryInterface)
	codeCacheInterface := cache.NewCodeCache(cmdable)
	codeRepositoryInterface := repository.NewCodeRepository(codeCacheInterface)
	smsService := ioc.InitSMS()
	codeServiceInterface := service.NewCodeService(codeRepositoryInterface, smsService)
	userHandler := web.NewUserHandler(userServiceInterface, codeServiceInterface)
	articleDaoInterface := dao.NewArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDaoInterface, articleCache)
	articleServiceInterface := service.NewArticleService(articleRepository)
	articleHandler := web.NewArticleHandler(articleServiceInterface)
	engine := ioc.InitGin(v, userHandler, articleHandler)
	return engine
}
